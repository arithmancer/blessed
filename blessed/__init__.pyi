"""Stubs for terminal.py"""
from __future__ import annotations

import typing

HAS_TTY: bool
_CUR_TERM: typing.Optional[str]

class Keystroke(str):
    def __new__(cls, ucs: str = ..., code: typing.Optional[int] = ..., name: typing.Optional[str] = ...) -> Keystroke: ...
    def __repr__(self) -> str: ...
    @property
    def is_sequence(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def code(self) -> int: ...

CallableString = typing.Union[NullCallableString, FormattingString, ParameterizingString, ParameterizingProxyString, FormattingOtherString]

class NullCallableString(str):
    def __new__(cls) -> NullCallableString: ...
    def __call__(self, *args) -> typing.Union[str, NullCallableString]: ...

class FormattingString(str):
    def __new__(cls, sequence: str, normal: str = ...) -> FormattingString: ...
    def __call__(self, *args) -> str: ...

class ParameterizingString(str):
    def __new__(cls, cap: str, normal: str = ..., name: str = ...) -> ParameterizingString: ...
    def __call__(self, *args) -> typing.Union[FormattingString, NullCallableString]: ...

class ParameterizingProxyString(str):
    def __new__(cls, fmt_pair: typing.Tuple[str, typing.Callable], normal:str, name:str) -> ParameterizingProxyString: ...
    def __call__(self, *args) -> FormattingString: ...

class FormattingOtherString(str):
    def __new__(cls, direct: str, target: CallableString) -> FormattingOtherString: ...
    def __getnewargs__(self) -> typing.Tuple[str, CallableString]: ...
    def __call__(self, *args) -> typing.Union[str, CallableString]: ...

class WINSZ(typing.NamedTuple):
    ws_row: int
    ws_col: int
    ws_xpixel: int
    ws_ypixel: int
    _FMT: str
    _BUF: str

class Terminal(object):
    _sugar: typing.Dict[str, str]

    def __init__(self, kind: typing.Optional[str] = ..., stream: typing.Optional[typing.IO] = ...,
                 force_styling: bool = ...): ...
    def __init__streams(self) -> None: ...
    def __init__color_capabilities(self) -> None: ...
    def __clear_color_capabilities(self) -> None: ...
    def __init__capabilities(self) -> None: ...
    def __init__keycodes(self) -> None: ...
    def __getattr__(self, attr: str) -> typing.Union[NullCallableString,
                                                     FormattingString,
                                                     ParameterizingString,
                                                     FormattingOtherString]: ...
    @property
    def kind(self) -> str: ...
    @property
    def does_styling(self) -> bool: ...
    @property
    def is_a_tty(self) -> bool: ...
    @property
    def height(self) -> int: ...
    @property
    def width(self) -> int: ...
    @property
    def pixel_height(self) -> int: ...
    @property
    def pixel_width(self) -> int: ...

    @staticmethod
    def _winsize(fd) -> WINSZ: ...
    def _height_and_width(self) -> WINSZ: ...

    @contextlib.contextmanager
    def location(self, x: typing.Optional[int] = ..., y: typing.Optional[int] = ...) -> None: ...
    def get_location(self, timeout: typing.Optional[float] = ...) -> typing.Tuple[int, int]: ...
    @contextlib.contextmanager
    def fullscreen(self) -> None: ...
    @contextlib.contextmanager
    def hidden_cursor(self) -> None: ...

    def move_xy(self, x: int, y: int) -> ParameterizingString: ...
    def move_yx(self, y: int, x: int) -> ParameterizingString: ...

    @property
    def move_left(self) -> FormattingOtherString: ...
    @property
    def move_right(self) -> FormattingOtherString: ...
    @property
    def move_up(self) -> FormattingOtherString: ...
    @property
    def move_down(self) -> FormattingOtherString: ...

    @property
    def color(self) -> ParameterizingString: ...
    def color_rgb(self, red:int, green:int, blue: int) -> FormattingString: ...
    @property
    def on_color(self) -> ParametrizingString: ...
    def on_color_rgb(self, red: int, green: int, blue: int) -> FormattingString: ...

    def formatter(self, value: str) -> typing.Union[FormattingString, NullCallableString]: ...
    def rgb_downconvert(self, red:int, green:int, blue: int) -> int: ...

    @property
    def normal(self) -> str: ...
    def link(self, url: str, text: str, url_id: str = ...) -> str: ...
    @property
    def stream(self) -> typing.TextIO: ...

    @property
    def number_of_colors(self) -> int: ...
    @number_of_colors.setter
    def number_of_colors(self, value: int) -> None: ...
    @property
    def color_distance_algorithm(self) -> str: ...
    @color_distance_algorithm.setter
    def color_distance_algorithm(self, value: str) -> None: ...

    def ljust(self, text: str, width: typing.Optional[int] = ..., fillchar: str = ...): ...
    def rjust(self, text: str, width: typing.Optional[int] = ..., fillchar: str = ...): ...
    def center(self, text: str, width: typing.Optional[int] = ..., fillchar: str = ...): ...
    def length(self, text: str) -> int: ...
    def strip(self, text: str, chars: typing.Optional[str] = ...) -> str: ...
    def rstrip(self, text: str, chars: typing.Optional[str] = ...) -> str: ...
    def lstrip(self, text: str, chars: typing.Optional[str] = ...) -> str: ...
    def strip_seqs(self, text: str) -> str: ...
    def split_seqs(self, text: str, **kwds) -> typing.Sequence[str]: ...
    def wrap(self, text: str, width: typing.Optional[int] = ..., **kwargs) -> typing.Sequence[str]: ...
    def getch(self) -> str: ...
    def ungetch(self, text: str) -> None: ...
    def kbhit(self, timeout: float = ...) -> bool: ...

    @contextlib.contextmanager
    def cbreak(self) -> None: ...
    @contextlib.contextmanager
    def raw(self) -> None: ...
    @contextlib.contextmanager
    def keypad(self) -> None: ...
    def inkey(self, timeout: typing.Optional[float] = ..., esc_delay: float = ...) -> Keystroke: ...